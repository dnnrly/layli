package layli

import (
	"strings"
	"testing"

	"github.com/antchfx/xmlquery"
	"github.com/dnnrly/layli/pathfinder/dijkstra"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"gopkg.in/yaml.v3"
)

func TestDiagram_EmbedsRootConfigValues(t *testing.T) {
	svg := ""
	d := Diagram{
		Output: func(data string) error { svg = data; return nil },
		Config: Config{
			Margin:     7,
			Border:     5,
			NodeWidth:  3,
			NodeHeight: 6,
		},
		Layout:   &Layout{},
		ShowGrid: false,
	}

	err := d.Draw()
	assert.NoError(t, err)

	dom, err := xmlquery.Parse(strings.NewReader(svg))
	require.NoError(t, err)

	root := xmlquery.FindOne(dom, "//svg")
	require.NotNil(t, root)

	assert.Equal(t, "7", root.SelectAttr("data-margin"))
	assert.Equal(t, "5", root.SelectAttr("data-border"))
	assert.Equal(t, "3", root.SelectAttr("data-node-width"))
	assert.Equal(t, "6", root.SelectAttr("data-node-height"))
}

func TestDiagram_DrawWithStyleClass(t *testing.T) {
	output := ""
	d := Diagram{
		Output: func(data string) error { output = data; return nil },
		Config: Config{
			Styles: map[string]string{
				".c1": "fill: black; stroke: white;",
				".c2": `stroke: black;
	stroke-width: 2;`},
		},
		Layout:   &Layout{},
		ShowGrid: false,
	}

	err := d.Draw()
	assert.NoError(t, err)
	assert.Contains(t, output, `<style type="text/css">
<![CDATA[
.c1 { fill: black; stroke: white; }
.c2 { stroke: black; stroke-width: 2; }
]]>
</style>
<g`) // Make sure that the style occurs BEFORE the g tag
}

func TestDiagram_DrawWithoutStyleClass(t *testing.T) {
	output := ""
	d := Diagram{
		Output:   func(data string) error { output = data; return nil },
		Layout:   &Layout{},
		ShowGrid: false,
	}

	err := d.Draw()
	assert.NoError(t, err)
	assert.NotContains(t, output, `<style type="text/css"`)
}

func TestDiagram_DrawNodeWithClass(t *testing.T) {
	output := ""
	d := Diagram{
		Output: func(data string) error { output = data; return nil },
		Layout: &Layout{
			Nodes: LayoutNodes{
				NewLayoutNode("node-1", "Text", 10, 10, 20, 20, "c1", ""),
			},
		},
		ShowGrid: false,
	}

	err := d.Draw()
	assert.NoError(t, err)
	assert.Regexp(t, `<rect.+id="node-1".+class="c1".+/>`, output)
}

func TestLayliFullFlow(t *testing.T) {
	check := func(t *testing.T, input string, contains string) {
		config, err := NewConfigFromFile(strings.NewReader(input))
		require.NoError(t, err)

		layout, err := NewLayoutFromConfig(func(start, end dijkstra.Point) PathFinder {
			return dijkstra.NewPathFinder(start, end)
		}, config)

		if err != nil {
			require.ErrorContains(t, err, contains)
		}
		d := Diagram{
			Output:   func(data string) error { return nil },
			ShowGrid: false,
			Config:   *config,
			Layout:   layout,
		}
		err = d.Draw()
		if err != nil {
			require.ErrorContains(t, err, contains)
		}

		if contains == "" {
			assert.NoError(t, err)
		}
	}

	t.Run("Normal random path", func(t *testing.T) {
		check(t, `path:
  strategy: random
  attempts: 10
nodes:
  - id: a
  - id: b
edges:
  - from: a
    to: b`, "")
	})

	t.Run("Long running", func(t *testing.T) {
		check(t, `width: 7
height: 7
margin: 8

nodes:
    - id: a
      contents: Node 1
    - id: b
      cojtents: Node 2
    - id: c
      contents: Noe 3
    - id: d
      contents: Node 4

edges:
    - from: a
      to: b
    - from: b
      to: c
    - from: c
      to: d
    - from: d
      to: a `, "")
	})

	t.Run("Styles", func(t *testing.T) {
		check(t, `width: 7
height: 7
margin: 2

nodes:
    - id: a
      contents: Node 1
      style: fill:blue
    - id: b
      contents: Node 2
      class: c1
    - id: c
      contents: Noe 3
    - id: d
      contents: Node 4

edges:
    - from: a
      to: b
      style: stroke:red
    - from: b
      to: c
      class: c2
    - from: c
      to: d

styles:
    c1: fill:red
    c2: stroke-width:2`, "")
	})
}

func TestAbsoluteFromSvg(t *testing.T) {
	check := func(t *testing.T, svg string, expected Config) {
		output := ""
		getOutput := func(data string) error { output = data; return nil }

		err := AbsoluteFromSVG(svg, getOutput)
		require.NoError(t, err)

		config := Config{}
		err = yaml.NewDecoder(strings.NewReader(output)).Decode(&config)
		require.NoError(t, err)
		assert.Equal(t, expected.String(), config.String())
	}

	t.Run("Reads complete SVG", func(t *testing.T) {
		check(t, `<?xml version="1.0"?>
<!-- Generated by SVGo -->
<svg width="380" height="300"
		style="background-color: white;"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
<![CDATA[
.class-1 { stroke-width:3; }
.class-2 { stroke:green; }
]]>
</style>
<g style="text-anchor:middle;font-family:sans;fill:none;stroke:black">
<defs>
<marker id="arrow" refX="10" refY="5" markerWidth="7" markerHeight="7" viewBox="0 0 10 10" fill="black" orient="auto-start-reverse" >
<path d="M 0 0 L 10 5 L 0 10 z" />
</marker>
</defs>
<rect x="60" y="60" width="80" height="40" rx="3" ry="3" id="a"  style="fill:cyan; stroke:red;" data-pos-x="3" data-pos-y="3" data-width="5" data-height="3" />
<text x="100" y="80" id="a-text" style="font-size:10px" >Node 1</text>
<rect x="240" y="60" width="80" height="40" rx="3" ry="3" id="b" class="class-2" data-pos-x="12" data-pos-y="3" data-width="5" data-height="3" />
<text x="280" y="80" id="b-text" style="font-size:10px" >Node 2</text>
<rect x="60" y="200" width="80" height="40" rx="3" ry="3" id="c" class="class-1" style="fill:cyan; stroke:red;" data-pos-x="3" data-pos-y="10" data-width="5" data-height="3" />
<text x="100" y="220" id="c-text" style="font-size:10px" >Node 3</text>
<rect x="240" y="200" width="80" height="40" rx="3" ry="3" id="d" data-pos-x="12" data-pos-y="10" data-width="5" data-height="3" />
<text x="280" y="220" id="d-text" style="font-size:10px" >Node 4</text>
<path d="M 140 80 L 240 80" id="edge-1" class="path-line class-1"  marker-end="url(#arrow)" data-from="a" data-to="b" />
<path d="M 260 100 L 260 120 L 220 120 L 220 220 L 140 220" id="edge-2" class="path-line class-1" style="stroke:green;" marker-end="url(#arrow)" data-from="b" data-to="c" />
<path d="M 120 240 L 120 260 L 260 260 L 260 240" id="edge-3" class="path-line"  marker-end="url(#arrow)" data-from="c" data-to="d" />
</g>
</svg>
`, Config{
			Layout: "absolute",
			Nodes: ConfigNodes{
				ConfigNode{Id: "a", Contents: "Node 1", Style: "fill:cyan; stroke:red;", Position: Position{X: 3, Y: 3}},
				ConfigNode{Id: "b", Contents: "Node 2", Class: "class-2", Position: Position{X: 12, Y: 3}},
				ConfigNode{Id: "c", Contents: "Node 3", Class: "class-1", Style: "fill:cyan; stroke:red;", Position: Position{X: 3, Y: 10}},
				ConfigNode{Id: "d", Contents: "Node 4", Position: Position{X: 12, Y: 10}},
			},
			Edges: ConfigEdges{
				ConfigEdge{From: "a", To: "b", Class: "class-1"},
				ConfigEdge{From: "b", To: "c", Class: "class-1"},
				ConfigEdge{From: "c", To: "d"},
			},
			Styles: ConfigStyles{
				".class-1": "{ stroke-width:3; }",
				".class-2": "{ stroke:green; }",
			},
		})
	})

	t.Run("Reads SVG without styles", func(t *testing.T) {
		check(t, `<?xml version="1.0"?>
<!-- Generated by SVGo -->
<svg width="380" height="300"
		style="background-color: white;"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink">
<g style="text-anchor:middle;font-family:sans;fill:none;stroke:black">
<defs>
<marker id="arrow" refX="10" refY="5" markerWidth="7" markerHeight="7" viewBox="0 0 10 10" fill="black" orient="auto-start-reverse" >
<path d="M 0 0 L 10 5 L 0 10 z" />
</marker>
</defs>
<rect x="60" y="60" width="80" height="40" rx="3" ry="3" id="a"  style="fill:cyan; stroke:red;" data-pos-x="3" data-pos-y="3" data-width="5" data-height="3" />
<text x="100" y="80" id="a-text" style="font-size:10px" >Node 1</text>
<rect x="240" y="60" width="80" height="40" rx="3" ry="3" id="b" class="class-2" data-pos-x="12" data-pos-y="3" data-width="5" data-height="3" />
<text x="280" y="80" id="b-text" style="font-size:10px" >Node 2</text>
<rect x="60" y="200" width="80" height="40" rx="3" ry="3" id="c" class="class-1" style="fill:cyan; stroke:red;" data-pos-x="3" data-pos-y="10" data-width="5" data-height="3" />
<text x="100" y="220" id="c-text" style="font-size:10px" >Node 3</text>
<rect x="240" y="200" width="80" height="40" rx="3" ry="3" id="d" data-pos-x="12" data-pos-y="10" data-width="5" data-height="3" />
<text x="280" y="220" id="d-text" style="font-size:10px" >Node 4</text>
<path d="M 140 80 L 240 80" id="edge-1" class="path-line class-1"  marker-end="url(#arrow)" data-from="a" data-to="b" />
<path d="M 260 100 L 260 120 L 220 120 L 220 220 L 140 220" id="edge-2" class="path-line class-1" style="stroke:green;" marker-end="url(#arrow)" data-from="b" data-to="c" />
<path d="M 120 240 L 120 260 L 260 260 L 260 240" id="edge-3" class="path-line"  marker-end="url(#arrow)" data-from="c" data-to="d" />
</g>
</svg>
`, Config{
			Layout: "absolute",
			Nodes: ConfigNodes{
				ConfigNode{Id: "a", Contents: "Node 1", Style: "fill:cyan; stroke:red;", Position: Position{X: 3, Y: 3}},
				ConfigNode{Id: "b", Contents: "Node 2", Class: "class-2", Position: Position{X: 12, Y: 3}},
				ConfigNode{Id: "c", Contents: "Node 3", Class: "class-1", Style: "fill:cyan; stroke:red;", Position: Position{X: 3, Y: 10}},
				ConfigNode{Id: "d", Contents: "Node 4", Position: Position{X: 12, Y: 10}},
			},
			Edges: ConfigEdges{
				ConfigEdge{From: "a", To: "b", Class: "class-1"},
				ConfigEdge{From: "b", To: "c", Class: "class-1"},
				ConfigEdge{From: "c", To: "d"},
			},
		})
	})

	t.Run("Sets width", func(t *testing.T) {
		check(t, `<?xml version="1.0"?>
<!-- Generated by SVGo -->
<svg width="1140" height="1060"
		style="background-color: white;"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink"
		data-node-width="4"
		data-node-height="2"
		data-border="3"
		data-margin="9"
		>
<g style="text-anchor:middle;font-family:sans;fill:none;stroke:black">
<defs>
<marker id="arrow" refX="10" refY="5" markerWidth="7" markerHeight="7" viewBox="0 0 10 10" fill="black" orient="auto-start-reverse" >
<path d="M 0 0 L 10 5 L 0 10 z" />
</marker>
</defs>
<rect x="240" y="240" width="140" height="100" rx="3" ry="3" id="a"   data-pos-x="12" data-pos-y="12" data-width="8" data-height="6" />
<text x="310" y="290" id="a-text" style="font-size:10px" >First</text>
<rect x="240" y="720" width="140" height="100" rx="3" ry="3" id="b"   data-pos-x="36" data-pos-y="12" data-width="8" data-height="6" />
<text x="310" y="770" id="b-text" style="font-size:10px" >Second</text>
<rect x="760" y="240" width="140" height="100" rx="3" ry="3" id="c"   data-pos-x="12" data-pos-y="36" data-width="8" data-height="6" />
<text x="830" y="290" id="c-text" style="font-size:10px" >Third</text>
<path d="M 320 720 L 320 340" id="edge-1" class="path-line"  marker-end="url(#arrow)" data-from="a" data-to="b" />
<path d="M 380 740 L 780 740 L 780 340" id="edge-2" class="path-line"  marker-end="url(#arrow)" data-from="b" data-to="c" />
</g>
</svg>
`, Config{
			Layout: "absolute",
			Nodes: ConfigNodes{
				ConfigNode{Id: "a", Contents: "First", Position: Position{X: 12, Y: 12}},
				ConfigNode{Id: "b", Contents: "Second", Position: Position{X: 36, Y: 12}},
				ConfigNode{Id: "c", Contents: "Third", Position: Position{X: 12, Y: 36}},
			},
			Edges: ConfigEdges{
				ConfigEdge{From: "a", To: "b"},
				ConfigEdge{From: "b", To: "c"},
			},
			NodeWidth:  4,
			NodeHeight: 2,
			Border:     3,
			Margin:     9,
		})
	})
}
